{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 24a87bbbdb4f1a768491","webpack:///./raster-to-gcode.js","webpack:///../~/lw.canvas-grid/dist/lw.canvas-grid.js"],"names":["RasterToGcode","settings","Object","assign","ppi","x","y","toolDiameter","rapidRate","feedRate","rateUnit","beamRange","min","max","beamPower","milling","zSafe","zSurface","zDepth","passDepth","offsets","X","Y","trimLine","joinPixel","burnWhite","verboseG","diagonal","overscan","precision","S","nonBlocking","filters","smoothing","brightness","contrast","gamma","grayscale","shadesOfGray","invertColor","onProgress","onProgressContext","onDone","onDoneContext","onAbort","onAbortContext","Error","passes","Math","abs","floor","ppm","parseFloat","toFixed","scaleRatio","running","gcode","gcodes","currentLine","lastCommands","outputSize","width","height","G1","G0","beamOffset","realBeamRange","_registerUserCallbacks","callbacks","on","size","undefined","_addHeader","_scanDiagonally","_scanHorizontally","push","options","i","length","splice","join","value","range","name","commands","Array","prototype","slice","call","arguments","command","line","il","_command","apply","defaultValue","pixel","getPixel","gray","error","index","point","G","s","_mapPixelPower","first","lastWhite","last","lastColored","p","shift","pop","points","power","reversed","pixels","firstPoint","lastPoint","rightPoint","leftPoint","unshift","_processMillingLine","_processLaserLine","_trimCurrentLine","_reduceCurrentLine","reverse","addCommand","_getPoint","plung","Z","zMax","pass","passNum","_overscanCurrentLine","w","h","computeCurrentLine","_getPixelPower","percent","lastPercent","processCurrentLine","_processCurrentLine","round","_onProgress","processNextLine","_onAbort","setTimeout","forEach","_onDone","totalLines","lineNum","event","callback","context","method","toUpperCase","heightMap"],"mappings":"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ACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAU;AACV;AACA;AACA;AACA;;AAEA;;;AAGA,QAAO;AACP;AACA;;AAEA;;AAEA;AACA;AACA,GAAE;AACF;;AAEA,kCAAiC,2CAA2C,gBAAgB,kBAAkB,OAAO,2BAA2B,wDAAwD,gCAAgC,uDAAuD,2DAA2D,EAAE,EAAE,yDAAyD,qEAAqE,6DAA6D,oBAAoB,GAAG,EAAE;;AAEljB;;AAEA;;AAEA,wCAAuC,uCAAuC,gBAAgB;;AAE9F,mDAAkD,0CAA0C,0DAA0D,EAAE;;AAExJ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,6BAA4B;AAC5B;;AAEA,4CAA2C;;AAE3C;AACA,iCAAgC;AAChC;;AAEA,uBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,OAAM;AACN;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,OAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,eAAc;AACd;;AAEA;;AAEA,OAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,eAAc;AACd;;AAEA;;AAEA,OAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,eAAc;AACd;AACA,OAAM;AACN;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,2BAA0B;;AAE1B;AACA;AACA;AACA;AACA;;AAEA,2BAA0B;AAC1B,2BAA0B;AAC1B,4BAA2B;AAC3B,4BAA2B;AAC3B,4BAA2B;AAC3B,4BAA2B;;AAE3B;AACA,yBAAwB,oBAAoB;AAC5C;AACA;AACA;;AAEA;AACA,6BAA4B,oBAAoB;AAChD;AACA;;AAEA;AACA;AACA;AACA,uBAAsB;AACtB;AACA;AACA;;AAEA;AACA;AACA,uBAAsB;AACtB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,eAAc;AACd;AACA;;AAEA;AACA;AACA;;AAEA;AACA,0BAAyB,qEAAqE;AAC9F;AACA,yBAAwB,qBAAqB;AAC7C,2BAA0B;AAC1B;AACA;AACA,OAAM;;AAEN;AACA,GAAE;;AAEF;;;AAGA;AACA;;AAEA,QAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAE;AACF,sCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW;AACX;AACA;AACA;AACA;;AAEA;;;AAGA,SAAQ;AACR;AACA;;AAEA;;AAEA;AACA;AACA,IAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO,gBAAgB;;AAEvB;AACA;;AAEA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,wCAAuC,QAAQ;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAE;AACF;AACA;;AAEA;AACA;AACA,EAAC;AACD;AACA,2C","file":"lw.raster-to-gcode.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"RasterToGcode\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"RasterToGcode\"] = factory();\n\telse\n\t\troot[\"RasterToGcode\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 24a87bbbdb4f1a768491","import CanvasGrid from 'lw.canvas-grid'\n\n// RasterToGcode class\nclass RasterToGcode extends CanvasGrid {\n    // Class constructor...\n    constructor(settings) {\n        // Defaults settings\n        settings = Object.assign({\n            ppi: { x: 254, y: 254 }, // Pixel Per Inch (25.4 ppi == 1 ppm)\n\n            toolDiameter: 0.1,      // Tool diameter in millimeters\n            rapidRate   : 1500,     // Rapid rate in mm/min (G0 F value) nullish value to disable\n            feedRate    : 500,      // Feed rate in mm/min (G1 F value)\n            rateUnit    : 'mm/min', // Rapid/Feed rate unit [mm/min, mm/sec]\n\n            beamRange: { min: 0, max: 1 },   // Beam power range (Firmware value)\n            beamPower: { min: 0, max: 100 }, // Beam power (S value) as percentage of beamRange\n\n            milling  : false, // EXPERIMENTAL\n            zSafe    : 5,     // Safe Z for fast move\n            zSurface : 0,     // Usinable surface (white pixels)\n            zDepth   : -10,   // Z depth (black pixels)\n            passDepth: 1,     // Pass depth in millimeters\n\n            offsets  : { X: 0, Y: 0 }, // Global coordinates offsets\n            trimLine : true,           // Trim trailing white pixels\n            joinPixel: true,           // Join consecutive pixels with same intensity\n            burnWhite: true,           // [true = G1 S0 | false = G0] on inner white pixels\n            verboseG : false,          // Output verbose GCode (print each commands)\n            diagonal : false,          // Go diagonally (increase the distance between points)\n            overscan : 0,              // Add some extra white space (in millimeters) before and after each line\n\n            precision: { X: 2, Y: 2, S: 4 }, // Number of decimals for each commands\n\n            nonBlocking: true, // Use setTimeout to avoid blocking the UI\n\n            filters: {\n                smoothing   : 0,      // Smoothing the input image ?\n                brightness  : 0,      // Image brightness [-255 to +255]\n                contrast    : 0,      // Image contrast [-255 to +255]\n                gamma       : 0,      // Image gamma correction [0.01 to 7.99]\n                grayscale   : 'none', // Graysale algorithm [average, luma, luma-601, luma-709, luma-240, desaturation, decomposition-[min|max], [red|green|blue]-chanel]\n                shadesOfGray: 256,    // Number of shades of gray [2-256]\n                invertColor : false   // Invert color...\n            },\n\n            onProgress       : null, // On progress callbacks\n            onProgressContext: null, // On progress callback context\n\n            onDone       : null, // On done callback\n            onDoneContext: null, // On done callback context\n\n            onAbort       : null, // On abort callback\n            onAbortContext: null  // On abort callback context\n        }, settings || {})\n\n        // Init properties\n        super(settings)\n\n        // Milling settings\n        if (this.milling) {\n            if (this.zSafe < this.zSurface) {\n                throw new Error('\"zSafe\" must be greater to \"zSurface\"')\n            }\n\n            this.passes = Math.abs(Math.floor(this.zDepth / this.passDepth))\n        }\n\n        // Negative beam size ?\n        if (this.toolDiameter <= 0) {\n            throw new Error('\"toolDiameter\" must be positive')\n        }\n\n        // Uniforme ppi\n        if (! this.ppi.x) {\n            this.ppi = { x: this.ppi, y: this.ppi }\n        }\n\n        // Calculate PPM = Pixel Per Millimeters\n        this.ppm = {\n            x: parseFloat((2540 / (this.ppi.x * 100)).toFixed(10)),\n            y: parseFloat((2540 / (this.ppi.y * 100)).toFixed(10))\n        }\n\n        // Calculate scale ratio\n        this.scaleRatio = {\n            x: this.ppm.x / this.toolDiameter,\n            y: this.ppm.y / this.toolDiameter\n        }\n\n        // State...\n        this.running      = false\n        this.gcode        = null\n        this.gcodes       = null\n        this.currentLine  = null\n        this.lastCommands = null\n\n        // Output size in millimeters\n        this.outputSize = { width : 0, height: 0 }\n\n        // G0 command\n        this.G1 = ['G', 1]\n        this.G0 = ['G', this.burnWhite ? 1 : 0]\n\n        // Calculate beam offset\n        this.beamOffset = this.toolDiameter * 1000 / 2000\n\n        // Calculate real beam range\n        this.realBeamRange = {\n            min: this.beamRange.max / 100 * this.beamPower.min,\n            max: this.beamRange.max / 100 * this.beamPower.max\n        }\n\n        // Adjuste feed rate to mm/min\n        if (this.rateUnit === 'mm/sec') {\n            this.feedRate  *= 60\n\n            if (this.rapidRate) {\n                this.rapidRate *= 60\n            }\n        }\n\n        // Register user callbacks\n        this._registerUserCallbacks(this)\n    }\n\n    // Register user callbacks\n    _registerUserCallbacks(callbacks) {\n        // Register user callbacks\n        callbacks.onProgress && this.on('progress', callbacks.onProgress, callbacks.onProgressContext)\n        callbacks.onAbort && this.on('abort', callbacks.onAbort, callbacks.onAbortContext)\n        callbacks.onDone && this.on('done', callbacks.onDone, callbacks.onDoneContext)\n    }\n\n    // Process image\n    _processImage() {\n        // Call parent method\n        super._processImage()\n\n        // Calculate output size\n        this.outputSize = {\n            width : this.size.width  * (this.toolDiameter * 1000) / 1000,\n            height: this.size.height * (this.toolDiameter * 1000) / 1000\n        }\n    }\n\n    // Abort job\n    abort() {\n        this.running = false\n    }\n\n    // Process image and return gcode string\n    run(settings) {\n        if (this.running) {\n            return\n        }\n\n        // Reset state\n        this.running      = true\n        this.gcode        = []\n        this.gcodes       = []\n        this.lastCommands = {}\n        this.currentLine  = null\n\n        // Defaults settings\n        settings = settings || {}\n\n        // Register user callbacks\n        this._registerUserCallbacks(settings)\n\n        // Non blocking mode ?\n        let nonBlocking = this.nonBlocking\n\n        if (settings.nonBlocking !== undefined) {\n            nonBlocking = settings.nonBlocking\n        }\n\n        // Add gcode header\n        this._addHeader()\n\n        // Scan type ?\n        if (this.diagonal) {\n            this._scanDiagonally(nonBlocking)\n        }\n        else {\n            this._scanHorizontally(nonBlocking)\n        }\n\n        if (! nonBlocking) {\n            return this.gcode\n        }\n    }\n\n    _addHeader() {\n        // Base headers\n        this.gcode.push(\n            '; Generated by LaserWeb (lw.raster-to-gcode.js)',\n            '; Size       : ' + this.outputSize.width + ' x ' + this.outputSize.height + ' mm',\n            '; PPI        : x: ' + this.ppi.x + ' - y: ' + this.ppi.y,\n            '; PPM        : x: ' + this.ppm.x + ' - y: ' + this.ppm.y,\n            '; Tool diam. : ' + this.toolDiameter + ' mm',\n            '; Feed rate  : ' + this.feedRate + ' ' + this.rateUnit\n        )\n\n        if (this.rapidRate) {\n           this.gcode.push('; Rapid rate  : ' + this.rapidRate + ' ' + this.rateUnit)\n        }\n\n        if (this.milling) {\n            this.gcode.push(\n                '; Z safe     : ' + this.zSafe,\n                '; Z surface  : ' + this.zSurface,\n                '; Z depth    : ' + this.zDepth\n            )\n        }\n        else {\n            this.gcode.push(\n                '; Beam range : ' + this.beamRange.min + ' to ' + this.beamRange.max,\n                '; Beam power : ' + this.beamPower.min + ' to ' + this.beamPower.max + ' %'\n            )\n        }\n\n        // Print activated options\n        let options = ['smoothing', 'trimLine', 'joinPixel', 'burnWhite', 'verboseG', 'diagonal']\n\n        for (var i = options.length - 1; i >= 0; i--) {\n            if (! this[options[i]]) {\n                options.splice(i, 1)\n            }\n        }\n\n        if (options.length) {\n            this.gcode.push('; Options    : ' + options.join(', '))\n        }\n\n        // Set feed rates\n        this.gcode.push('')\n\n        if (this.rapidRate) {\n           this.gcode.push('G0 F' + this.rapidRate)\n        }\n\n        this.gcode.push('G1 F' + this.feedRate)\n        this.gcode.push('')\n    }\n\n    // Map S value to pixel power\n    _mapPixelPower(value) {\n        let range = this.milling ? { min: 0, max: this.zDepth } : this.realBeamRange\n        return value * (range.max - range.min) / 255 + range.min\n    }\n\n    // Compute and return a command, return null if not changed\n    _command(name, value) {\n        // If the value argument is an object\n        if (typeof value === 'object') {\n            // Computed commands line\n            let commands = Array.prototype.slice.call(arguments)\n            let command, line = []\n\n            // for each command\n            for (var i = 0, il = commands.length; i < il; i++) {\n                command = this._command.apply(this, commands[i])\n                command && line.push(command)\n            }\n\n            // Return the line if not empty\n            return line.length ? line.join(' ') : null\n        }\n\n        // Format the value\n        value = value.toFixed(this.precision[name] || 0)\n\n        // If the value was changed or if verbose mode on\n        if (this.verboseG || value !== this.lastCommands[name]) {\n            this.lastCommands[name] = value\n            return name + value\n        }\n\n        // No change\n        return null\n    }\n\n    // Get a pixel power value from the canvas data grid\n    _getPixelPower(x, y, defaultValue) {\n        try {\n            // Reverse Y value since canvas as top/left origin\n            y = this.size.height - y - 1\n\n            // Get pixel info\n            let pixel = this.getPixel(x, y)\n\n            // Reversed gray value [ 0 = white | 255 = black ]\n            return 255 - pixel.gray\n        }\n        catch (error) {\n            if (arguments.length === 3) {\n                return defaultValue\n            }\n            throw error\n        }\n    }\n\n    // Get a point from the current line with real world coordinates\n    _getPoint(index) {\n        // Get the point object from the current line\n        let point = this.currentLine[index]\n\n        // No point\n        if (! point) {\n            return null\n        }\n\n        // Commands\n        point.G = point.s ? ['G', 1] : this.G0\n        point.X = (point.x * this.toolDiameter) + this.offsets.X\n        point.Y = (point.y * this.toolDiameter) + this.offsets.Y\n        point.S = this._mapPixelPower(point.s)\n\n        // Offsets\n        if (this.diagonal) {\n            // Vertical offset\n            point.Y += this.toolDiameter\n\n            // Horizontal offset\n            if (point.first || point.lastWhite) {\n                point.X += this.beamOffset\n                point.Y -= this.beamOffset\n            }\n            else if (point.last || point.lastColored) {\n                point.X -= this.beamOffset\n                point.Y += this.beamOffset\n            }\n        }\n        else {\n            // Vertical offset\n            point.Y += this.beamOffset\n\n            // Horizontal offset\n            if (point.first || point.lastWhite) {\n                point.X += this.beamOffset\n            }\n            else if (point.last || point.lastColored) {\n                point.X -= this.beamOffset\n            }\n        }\n\n        // Return the point\n        return point\n    }\n\n    // Remove all trailing white spaces from the current line\n    _trimCurrentLine() {\n        // Remove white spaces from the left\n        let point = this.currentLine[0]\n\n        while (point && ! point.p) {\n            this.currentLine.shift()\n            point = this.currentLine[0]\n        }\n\n        // Remove white spaces from the right\n        point = this.currentLine[this.currentLine.length - 2]\n\n        while (point && ! point.p) {\n            this.currentLine.pop()\n            point = this.currentLine[this.currentLine.length - 2]\n        }\n\n        // Return the new line length\n        return this.currentLine.length\n    }\n\n    // Join pixel with same power\n    _reduceCurrentLine() {\n        // Line too short to be reduced\n        if (this.currentLine.length < 3) {\n            return this.currentLine.length\n        }\n\n        // Extract all points exept the first one\n        let points = this.currentLine.splice(1)\n\n        // Get current power\n        let power = this.currentLine[0].p\n\n        // For each extracted point\n        for (var point, i = 0, il = points.length - 1; i < il; i++) {\n            // Current point\n            point = points[i]\n\n            // On power change\n            if (power !== point.p) {\n                this.currentLine.push(point)\n            }\n\n            // Update power\n            power = point.p\n        }\n\n        // Add last point\n        this.currentLine.push(points[i])\n    }\n\n    // Add extra white pixels at the ends\n    _overscanCurrentLine(reversed) {\n        // Number of pixels to add on each side\n        let pixels = this.overscan / this.ppm.x\n\n        // Get first/last point\n        let firstPoint = this.currentLine[0]\n        let lastPoint  = this.currentLine[this.currentLine.length - 1]\n\n        // Is last white/colored point ?\n        firstPoint.s && (firstPoint.lastWhite  = true)\n        lastPoint.s  && (lastPoint.lastColored = true)\n\n        // Reversed line ?\n        reversed ? (lastPoint.s = 0) : (firstPoint.s = 0)\n\n        // Create left/right points\n        let rightPoint = { x: lastPoint.x + pixels , y: lastPoint.y , s: 0, p: 0 }\n        let leftPoint  = { x: firstPoint.x - pixels, y: firstPoint.y, s: 0, p: 0 }\n\n        if (this.diagonal) {\n            leftPoint.y  += pixels\n            rightPoint.y -= pixels\n        }\n\n        // Add left/right points to current line\n        this.currentLine.unshift(leftPoint)\n        this.currentLine.push(rightPoint)\n    }\n\n    // Process current line and return an array of GCode text lines\n    _processCurrentLine(reversed) {\n        if (this.milling) {\n            return this._processMillingLine(reversed)\n        }\n\n        return this._processLaserLine(reversed)\n    }\n\n    // Process current line and return an array of GCode text lines\n    _processMillingLine(reversed) {\n        // Skip empty line\n        if (! this._trimCurrentLine()) {\n            return null\n        }\n\n        // Join pixel with same power\n        if (this.joinPixel) {\n            this._reduceCurrentLine()\n        }\n\n        // Mark first and last point on the current line\n        this.currentLine[0].first = true\n        this.currentLine[this.currentLine.length - 1].last = true\n\n        // Reversed line ?\n        if (reversed) {\n            this.currentLine = this.currentLine.reverse()\n        }\n\n        // Point index\n        let point, index = 0\n\n        // Init loop vars...\n        let command, gcode = []\n\n        let addCommand = (...args) => {\n            command = this._command(...args)\n            command && gcode.push(command)\n        }\n\n        // Get first point\n        point = this._getPoint(index)\n\n        let plung = false\n        let Z, zMax\n\n        let pass = (passNum) => {\n            // Move to start of the line\n            addCommand(['G', 0], ['Z', this.zSafe])\n            addCommand(['G', 0], ['X', point.X], ['Y', point.Y])\n            addCommand(['G', 0], ['Z', this.zSurface])\n\n            // For each point on the line\n            while (point) {\n                if (point.S) {\n                    if (plung) {\n                        addCommand(['G', 0], ['Z', this.zSurface])\n                        plung = false\n                    }\n\n                    Z    = point.S\n                    zMax = this.passDepth * passNum\n\n                    // Last pass\n                    if (passNum < this.passes) {\n                        Z = Math.max(Z, -zMax)\n                    }\n\n                    addCommand(['G', 1], ['Z', this.zSurface + Z])\n                    addCommand(['G', 1], ['X', point.X], ['Y', point.Y])\n                }\n                else {\n                    if (plung) {\n                        addCommand(['G', 1], ['Z', this.zSurface])\n                        plung = false\n                    }\n\n                    addCommand(['G', 0], ['Z', this.zSafe])\n                    addCommand(['G', 0], ['X', point.X], ['Y', point.Y])\n                }\n\n                if (point.lastWhite || point.lastColored) {\n                    plung = true\n                }\n\n                // Get next point\n                point = this._getPoint(++index)\n            }\n\n            // Move to Z safe\n            addCommand(['G', 1], ['Z', this.zSurface])\n            addCommand(['G', 0], ['Z', this.zSafe])\n        }\n\n        for (var i = 1; i <= this.passes; i++) {\n            pass(i)\n\n            if (! gcode.length) {\n                break\n            }\n\n            if (this.gcodes.length < i) {\n                this.gcodes.push([])\n            }\n            else {\n                this.gcodes[i - 1].push.apply(this.gcodes[i - 1], gcode)\n            }\n\n            index = 0\n            gcode = []\n            point = this._getPoint(index)\n\n            this.lastCommands = {}\n        }\n\n        // Not sure what to return...\n        return null\n    }\n\n    // Process current line and return an array of GCode text lines\n    _processLaserLine(reversed) {\n        // Trim trailing white spaces ?\n        if (this.trimLine && ! this._trimCurrentLine()) {\n            // Skip empty line\n            return null\n        }\n\n        // Join pixel with same power\n        if (this.joinPixel) {\n            this._reduceCurrentLine()\n        }\n\n        // Overscan ?\n        if (this.overscan) {\n            this._overscanCurrentLine(reversed)\n        }\n\n        // Mark first and last point on the current line\n        this.currentLine[0].first = true\n        this.currentLine[this.currentLine.length - 1].last = true\n\n        // Reversed line ?\n        if (reversed) {\n            this.currentLine = this.currentLine.reverse()\n        }\n\n        // Point index\n        let point, index = 0\n\n        // Init loop vars...\n        let command, gcode = []\n\n        let addCommand = (...args) => {\n            command = this._command(...args)\n            command && gcode.push(command)\n        }\n\n        // Get first point\n        point = this._getPoint(index)\n\n        // Move to start of the line\n        addCommand(this.G0, ['X', point.X], ['Y', point.Y], ['S', 0])\n\n        // Get next point\n        point = this._getPoint(++index)\n\n        // For each point on the line\n        while (point) {\n            // Burn to next point\n            addCommand(point.G, ['X', point.X], ['Y', point.Y], ['S', point.S])\n\n            // Get next point\n            point = this._getPoint(++index)\n        }\n\n        // Return gcode commands array\n        if (gcode.length) {\n            return gcode\n        }\n\n        // Empty line\n        return null\n    }\n\n    // Parse horizontally\n    _scanHorizontally(nonBlocking) {\n        // Init loop vars\n        let x = 0, y = 0\n        let s, p, point, gcode\n        let w = this.size.width\n        let h = this.size.height\n\n        let reversed    = false\n        let lastWhite   = false\n        let lastColored = false\n\n        let computeCurrentLine = () => {\n            // Reset current line\n            this.currentLine = []\n\n            // Reset point object\n            point = null\n\n            // For each pixel on the line\n            for (x = 0; x <= w; x++) {\n                // Get pixel power\n                s = p = this._getPixelPower(x, y, p)\n\n                // Is last white/colored pixel\n                lastWhite   = point && ! point.p && p\n                lastColored = point && point.p && ! p\n\n                // Pixel color from last one on normal line\n                if (! reversed && point) {\n                    s = point.p\n                }\n\n                // Create point object\n                point = { x: x, y: y, s: s, p: p }\n\n                // Set last white/colored pixel\n                lastWhite   && (point.lastWhite   = true)\n                lastColored && (point.lastColored = true)\n\n                // Add point to current line\n                this.currentLine.push(point)\n            }\n        }\n\n        let percent     = 0\n        let lastPercent = 0\n\n        let processCurrentLine = () => {\n            // Process pixels line\n            gcode = this._processCurrentLine(reversed)\n\n            // Call progress callback\n            percent = Math.round((y / h) * 100)\n\n            if (percent > lastPercent) {\n                this._onProgress({ gcode, percent })\n            }\n\n            lastPercent = percent\n\n            // Skip empty gcode line\n            if (! gcode) {\n                return\n            }\n\n            // Toggle line state\n            reversed = ! reversed\n\n            // Concat line\n            this.gcode.push.apply(this.gcode, gcode)\n        }\n\n        let processNextLine = () => {\n            // Aborted ?\n            if (! this.running) {\n                return this._onAbort()\n            }\n\n            // Process line...\n            computeCurrentLine()\n            processCurrentLine()\n\n            y++\n\n            if (y < h) {\n                if (nonBlocking) {\n                    setTimeout(processNextLine, 0)\n                }\n                else {\n                    processNextLine()\n                }\n            }\n            else {\n                if (this.milling) {\n                    this.gcodes.forEach(gcode => {\n                        this.gcode.push.apply(this.gcode, gcode)\n                    })\n                }\n\n                this._onDone({ gcode: this.gcode })\n                this.running = false\n            }\n        }\n\n        processNextLine()\n    }\n\n    // Parse diagonally\n    _scanDiagonally(nonBlocking) {\n        // Init loop vars\n        let x = 0, y = 0\n        let s, p, point, gcode\n        let w = this.size.width\n        let h = this.size.height\n\n        let totalLines  = w + h - 1\n        let lineNum     = 0\n        let reversed    = false\n        let lastWhite   = false\n        let lastColored = false\n\n        let computeCurrentLine = (x, y) => {\n            // Reset current line\n            this.currentLine = []\n\n            // Reset point object\n            point = null\n\n            // Increment line num\n            lineNum++\n\n            while(true) {\n                // Y limit reached !\n                if (y < -1 || y == h) {\n                    break\n                }\n\n                // X limit reached !\n                if (x < 0 || x > w) {\n                    break\n                }\n\n                // Get pixel power\n                s = p = this._getPixelPower(x, y, p)\n\n                // Is last white/colored pixel\n                lastWhite   = point && (! point.p && p)\n                lastColored = point && (point.p && ! p)\n\n                // Pixel color from last one on normal line\n                if (! reversed && point) {\n                    s = point.p\n                }\n\n                // Create point object\n                point = { x: x, y: y, s: s, p: p }\n\n                // Set last white/colored pixel\n                lastWhite   && (point.lastWhite   = true)\n                lastColored && (point.lastColored = true)\n\n                // Add the new point\n                this.currentLine.push(point)\n\n                // Next coords\n                x++\n                y--\n            }\n        }\n\n        let percent     = 0\n        let lastPercent = 0\n\n        let processCurrentLine = () => {\n            // Process pixels line\n            gcode = this._processCurrentLine(reversed)\n\n            // Call progress callback\n            percent = Math.round((lineNum / totalLines) * 100)\n\n            if (percent > lastPercent) {\n                this._onProgress({ gcode, percent })\n            }\n\n            lastPercent = percent\n\n            // Skip empty gcode line\n            if (! gcode) {\n                return\n            }\n\n            // Toggle line state\n            reversed = ! reversed\n\n            // Concat line\n            this.gcode.push.apply(this.gcode, gcode)\n        }\n\n        let processNextLine = () => {\n            // Aborted ?\n            if (! this.running) {\n                return this._onAbort()\n            }\n\n            // Process line...\n            computeCurrentLine(x, y)\n            processCurrentLine()\n\n            if (! x) y++\n            else x++\n\n            if (y === h) {\n                x++\n                y--\n            }\n\n            if (y < h && x < w) {\n                if (nonBlocking) {\n                    setTimeout(processNextLine, 0)\n                }\n                else {\n                    processNextLine()\n                }\n            }\n            else {\n                this._onDone({ gcode: this.gcode })\n                this.running = false\n            }\n        }\n\n        processNextLine()\n    }\n\n    _onProgress(event) {\n        //console.log('progress:', event.percent)\n    }\n\n    _onDone(event) {\n        //console.log('done:', event.gcode.length)\n    }\n\n    _onAbort() {\n        //console.log('abort')\n    }\n\n    on(event, callback, context) {\n        let method = '_on' + event[0].toUpperCase() + event.slice(1)\n\n        if (! this[method] || typeof this[method] !== 'function') {\n            throw new Error('Undefined event: ' + event)\n        }\n\n        this[method] = event => callback.call(context || this, event)\n\n        return this\n    }\n\n    // Return the bitmap height-map\n    getHeightMap(settings) {\n        if (this.running) {\n            return\n        }\n\n        // Init loop vars\n        this.running  = true\n        let heightMap = []\n\n        let x = 0\n        let y = 0\n        let w = this.size.width\n        let h = this.size.height\n\n        let percent     = 0\n        let lastPercent = 0\n\n        // Defaults settings\n        settings = settings || {}\n\n        // Register user callbacks\n        this._registerUserCallbacks(settings)\n\n        // Non blocking mode ?\n        let nonBlocking = this.nonBlocking\n\n        if (settings.nonBlocking !== undefined) {\n            nonBlocking = settings.nonBlocking\n        }\n\n        let computeCurrentLine = () => {\n            // Reset current line\n            let pixels = []\n\n            // For each pixel on the line\n            for (x = 0; x < w; x++) {\n                pixels.push(this._mapPixelPower(this._getPixelPower(x, y)))\n            }\n\n            // Call progress callback\n            percent = Math.round((y / h) * 100)\n\n            if (percent > lastPercent) {\n                //onProgress.call(settings.progressContext || this, { pixels, percent })\n                this._onProgress({ pixels, percent })\n            }\n\n            lastPercent = percent\n\n            // Add pixels line\n            heightMap.push(pixels)\n        }\n\n        let processNextLine = () => {\n            // Aborted ?\n            if (! this.running) {\n                return this._onAbort()\n            }\n\n            // Process line...\n            computeCurrentLine()\n\n            y++\n\n            if (y < h) {\n                if (nonBlocking) {\n                    setTimeout(processNextLine, 0)\n                }\n                else {\n                    processNextLine()\n                }\n            }\n            else {\n                //onDone.call(settings.doneContext || this, { heightMap })\n                this._onDone({ heightMap })\n                this.running = false\n            }\n        }\n\n        processNextLine()\n\n        if (! nonBlocking) {\n            return heightMap\n        }\n    }\n}\n\n// Exports\nexport { RasterToGcode }\nexport default RasterToGcode\n\n\n\n// WEBPACK FOOTER //\n// ./raster-to-gcode.js","(function webpackUniversalModuleDefinition(root, factory) {\r\n\tif(typeof exports === 'object' && typeof module === 'object')\r\n\t\tmodule.exports = factory();\r\n\telse if(typeof define === 'function' && define.amd)\r\n\t\tdefine(\"CanvasGrid\", [], factory);\r\n\telse if(typeof exports === 'object')\r\n\t\texports[\"CanvasGrid\"] = factory();\r\n\telse\r\n\t\troot[\"CanvasGrid\"] = factory();\r\n})(this, function() {\r\nreturn /******/ (function(modules) { // webpackBootstrap\r\n/******/ \t// The module cache\r\n/******/ \tvar installedModules = {};\r\n/******/\r\n/******/ \t// The require function\r\n/******/ \tfunction __webpack_require__(moduleId) {\r\n/******/\r\n/******/ \t\t// Check if module is in cache\r\n/******/ \t\tif(installedModules[moduleId])\r\n/******/ \t\t\treturn installedModules[moduleId].exports;\r\n/******/\r\n/******/ \t\t// Create a new module (and put it into the cache)\r\n/******/ \t\tvar module = installedModules[moduleId] = {\r\n/******/ \t\t\texports: {},\r\n/******/ \t\t\tid: moduleId,\r\n/******/ \t\t\tloaded: false\r\n/******/ \t\t};\r\n/******/\r\n/******/ \t\t// Execute the module function\r\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\r\n/******/\r\n/******/ \t\t// Flag the module as loaded\r\n/******/ \t\tmodule.loaded = true;\r\n/******/\r\n/******/ \t\t// Return the exports of the module\r\n/******/ \t\treturn module.exports;\r\n/******/ \t}\r\n/******/\r\n/******/\r\n/******/ \t// expose the modules object (__webpack_modules__)\r\n/******/ \t__webpack_require__.m = modules;\r\n/******/\r\n/******/ \t// expose the module cache\r\n/******/ \t__webpack_require__.c = installedModules;\r\n/******/\r\n/******/ \t// __webpack_public_path__\r\n/******/ \t__webpack_require__.p = \"\";\r\n/******/\r\n/******/ \t// Load entry module and return exports\r\n/******/ \treturn __webpack_require__(0);\r\n/******/ })\r\n/************************************************************************/\r\n/******/ ([\r\n/* 0 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\tmodule.exports = __webpack_require__(1);\r\n\r\n\r\n/***/ },\r\n/* 1 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\t\r\n\tObject.defineProperty(exports, \"__esModule\", {\r\n\t    value: true\r\n\t});\r\n\texports.CanvasGrid = undefined;\r\n\t\r\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\r\n\t\r\n\tvar _lw = __webpack_require__(2);\r\n\t\r\n\tvar _lw2 = _interopRequireDefault(_lw);\r\n\t\r\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\t\r\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\r\n\t\r\n\t// CanvasGrid class\r\n\tvar CanvasGrid = function () {\r\n\t    // Class constructor...\r\n\t    function CanvasGrid(settings) {\r\n\t        _classCallCheck(this, CanvasGrid);\r\n\t\r\n\t        // Init properties\r\n\t        this.cellSize = 1024;\r\n\t        this.scaleRatio = { x: 1, y: 1 };\r\n\t        this.filters = {};\r\n\t\r\n\t        Object.assign(this, settings || {});\r\n\t\r\n\t        if (!this.scaleRatio.x) {\r\n\t            this.scaleRatio = { x: this.scaleRatio, y: this.scaleRatio };\r\n\t        }\r\n\t\r\n\t        this.size = { width: 0, height: 0, cols: 0, rows: 0 };\r\n\t        this.file = null;\r\n\t        this.image = null;\r\n\t        this.url = null;\r\n\t        this.canvas = [];\r\n\t        this.pixels = [];\r\n\t    }\r\n\t\r\n\t    // <input> can be Image, File, URL object or URL string (http://* or data:image/*)\r\n\t\r\n\t\r\n\t    _createClass(CanvasGrid, [{\r\n\t        key: 'load',\r\n\t        value: function load(input) {\r\n\t            // Load File object\r\n\t            if (input instanceof File) {\r\n\t                return this.loadFromFile(input);\r\n\t            }\r\n\t\r\n\t            // Load Image object\r\n\t            if (input instanceof Image) {\r\n\t                return this.loadFromImage(input);\r\n\t            }\r\n\t\r\n\t            // Load URL object\r\n\t            if (typeof input === 'string' || input instanceof URL) {\r\n\t                return this.loadFromURL(input.trim());\r\n\t            }\r\n\t\r\n\t            // Return rejected promise with an Error object\r\n\t            return Promise.reject(new Error('Unsupported input format.'));\r\n\t        }\r\n\t\r\n\t        // Load image\r\n\t\r\n\t    }, {\r\n\t        key: '_loadImage',\r\n\t        value: function _loadImage(src, reject, resolve) {\r\n\t            var _this = this;\r\n\t\r\n\t            // Create Image object\r\n\t            var image = new Image();\r\n\t\r\n\t            // Register for load and error events\r\n\t            image.onload = function (event) {\r\n\t                _this.loadFromImage(image).then(resolve).catch(reject);\r\n\t            };\r\n\t\r\n\t            image.onerror = function (event) {\r\n\t                reject(new Error('An error occurred while loading the image : ' + src));\r\n\t            };\r\n\t\r\n\t            // Load the image from File url\r\n\t            image.src = src;\r\n\t        }\r\n\t\r\n\t        // Load from File object\r\n\t\r\n\t    }, {\r\n\t        key: 'loadFromFile',\r\n\t        value: function loadFromFile(input) {\r\n\t            var _this2 = this;\r\n\t\r\n\t            return new Promise(function (resolve, reject) {\r\n\t                // Bad input type\r\n\t                if (!(input instanceof File)) {\r\n\t                    reject(new Error('Input param must be a File object.'));\r\n\t                }\r\n\t\r\n\t                // Set input file\r\n\t                _this2.file = input;\r\n\t\r\n\t                // Load image\r\n\t                _this2._loadImage(URL.createObjectURL(input), reject, resolve);\r\n\t            });\r\n\t        }\r\n\t\r\n\t        // Load from URL object or string\r\n\t\r\n\t    }, {\r\n\t        key: 'loadFromURL',\r\n\t        value: function loadFromURL(input) {\r\n\t            var _this3 = this;\r\n\t\r\n\t            return new Promise(function (resolve, reject) {\r\n\t                // Bad input type\r\n\t                if (!(input instanceof URL) && typeof input !== 'string') {\r\n\t                    reject(new Error('Input param must be a URL string or object.'));\r\n\t                }\r\n\t\r\n\t                // Create url object\r\n\t                var url = input instanceof URL ? input : new URL(input);\r\n\t\r\n\t                // Set url\r\n\t                _this3.url = url;\r\n\t\r\n\t                // Load image\r\n\t                _this3._loadImage(url, reject, resolve);\r\n\t            });\r\n\t        }\r\n\t\r\n\t        // Load from Image object\r\n\t\r\n\t    }, {\r\n\t        key: 'loadFromImage',\r\n\t        value: function loadFromImage(input) {\r\n\t            var _this4 = this;\r\n\t\r\n\t            return new Promise(function (resolve, reject) {\r\n\t                // Bad input type\r\n\t                if (!(input instanceof Image)) {\r\n\t                    reject(new Error('Input param must be a Image object.'));\r\n\t                }\r\n\t\r\n\t                // Set input image\r\n\t                _this4.image = input;\r\n\t\r\n\t                // Process image\r\n\t                _this4._processImage();\r\n\t\r\n\t                // Resolve the promise\r\n\t                resolve(_this4);\r\n\t            });\r\n\t        }\r\n\t    }, {\r\n\t        key: '_processImage',\r\n\t        value: function _processImage() {\r\n\t            // Reset canvas grid\r\n\t            this.canvas = [];\r\n\t            this.pixels = [];\r\n\t\r\n\t            // Calculate grid size\r\n\t            var width = Math.round(this.image.width * this.scaleRatio.x);\r\n\t            var height = Math.round(this.image.height * this.scaleRatio.y);\r\n\t            var cols = Math.ceil(width / this.cellSize);\r\n\t            var rows = Math.ceil(height / this.cellSize);\r\n\t\r\n\t            this.size = { width: width, height: height, cols: cols, rows: rows };\r\n\t\r\n\t            // Create canvas grid\r\n\t            var line = null;\r\n\t            var canvas = null;\r\n\t            var pixels = null;\r\n\t            var context = null;\r\n\t\r\n\t            var x = null; // cols\r\n\t            var y = null; // rows\r\n\t            var sx = null; // scaled cols\r\n\t            var sy = null; // scaled rows\r\n\t            var sw = null; // scaled width\r\n\t            var sh = null; // scaled height\r\n\t\r\n\t            // For each line\r\n\t            for (y = 0; y < this.size.rows; y++) {\r\n\t                // Reset current line\r\n\t                line = [];\r\n\t                pixels = [];\r\n\t\r\n\t                // For each column\r\n\t                for (x = 0; x < this.size.cols; x++) {\r\n\t                    // Create canvas element\r\n\t                    canvas = document.createElement('canvas');\r\n\t\r\n\t                    // Set canvas size\r\n\t                    if (x === 0 || x < this.size.cols - 1) {\r\n\t                        canvas.width = this.size.width < this.cellSize ? this.size.width : this.cellSize;\r\n\t                    } else {\r\n\t                        // Get the rest for the last item (except the first one)\r\n\t                        canvas.width = this.size.width % this.cellSize;\r\n\t                    }\r\n\t\r\n\t                    if (y === 0 || y < this.size.rows - 1) {\r\n\t                        canvas.height = this.size.height < this.cellSize ? this.size.height : this.cellSize;\r\n\t                    } else {\r\n\t                        // Get the rest for the last item (except the first one)\r\n\t                        canvas.height = this.size.height % this.cellSize;\r\n\t                    }\r\n\t\r\n\t                    // Get canvas 2d context\r\n\t                    context = canvas.getContext('2d');\r\n\t\r\n\t                    // Fill withe background (avoid alpha chanel calculation)\r\n\t                    context.fillStyle = 'white';\r\n\t                    context.fillRect(0, 0, canvas.width, canvas.height);\r\n\t\r\n\t                    // Draw the part of image in the canvas (scale)\r\n\t                    sw = canvas.width / this.scaleRatio.x;\r\n\t                    sh = canvas.height / this.scaleRatio.y;\r\n\t                    sx = x * this.cellSize / this.scaleRatio.x;\r\n\t                    sy = y * this.cellSize / this.scaleRatio.y;\r\n\t\r\n\t                    context.drawImage(this.image, sx, sy, sw, sh, 0, 0, canvas.width, canvas.height);\r\n\t\r\n\t                    // Apply image filters\r\n\t                    (0, _lw2.default)(canvas, this.filters);\r\n\t\r\n\t                    // Add the canvas to current line\r\n\t                    line.push(canvas);\r\n\t\r\n\t                    // Add the canvas image data to current line\r\n\t                    pixels.push(context.getImageData(0, 0, canvas.width, canvas.height).data);\r\n\t                }\r\n\t\r\n\t                // Add the line to canvas grid\r\n\t                this.pixels.push(pixels);\r\n\t                this.canvas.push(line);\r\n\t            }\r\n\t        }\r\n\t    }, {\r\n\t        key: 'getPixel',\r\n\t        value: function getPixel(x, y) {\r\n\t            // Test coords validity\r\n\t            x = parseInt(x);\r\n\t            y = parseInt(y);\r\n\t\r\n\t            if (isNaN(x) || isNaN(y)) {\r\n\t                throw new Error('[x, y] params must be Integer.');\r\n\t            }\r\n\t\r\n\t            // Test coords range\r\n\t            if (x < 0 || x >= this.size.width) {\r\n\t                throw new Error('Out of range: x = ' + x + ', max: ' + this.size.width);\r\n\t            }\r\n\t\r\n\t            if (y < 0 || y >= this.size.height) {\r\n\t                throw new Error('Out of range: y = ' + y + ', max: ' + this.size.height);\r\n\t            }\r\n\t\r\n\t            // Calculate target canvas coords\r\n\t            var col = parseInt(x / this.cellSize);\r\n\t            var row = parseInt(y / this.cellSize);\r\n\t\r\n\t            // Adjuste x/y values relative to canvas origin\r\n\t            col && (x -= this.cellSize * col);\r\n\t            row && (y -= this.cellSize * row);\r\n\t\r\n\t            // Get pixel data\r\n\t            var cellSize = this.cellSize;\r\n\t\r\n\t            if (this.size.width < cellSize) {\r\n\t                cellSize = this.size.width;\r\n\t            } else if (this.size.width < cellSize * (col + 1)) {\r\n\t                cellSize = this.size.width % cellSize;\r\n\t            }\r\n\t\r\n\t            var i = y * (cellSize * 4) + x * 4;\r\n\t            var pixels = this.pixels[row][col];\r\n\t            var pixelData = pixels.slice(i, i + 4);\r\n\t\r\n\t            return {\r\n\t                color: { r: pixelData[0], g: pixelData[1], b: pixelData[2], a: pixelData[3] },\r\n\t                gray: (pixelData[0] + pixelData[1] + pixelData[2]) / 3,\r\n\t                grid: { col: col, row: row },\r\n\t                coords: { x: x, y: y }\r\n\t            };\r\n\t        }\r\n\t    }]);\r\n\t\r\n\t    return CanvasGrid;\r\n\t}();\r\n\t\r\n\t// Exports\r\n\t\r\n\t\r\n\texports.CanvasGrid = CanvasGrid;\r\n\texports.default = CanvasGrid;\r\n\r\n/***/ },\r\n/* 2 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t(function webpackUniversalModuleDefinition(root, factory) {\r\n\t\tif(true)\r\n\t\t\tmodule.exports = factory();\r\n\t\telse if(typeof define === 'function' && define.amd)\r\n\t\t\tdefine(\"CanvasFilter\", [], factory);\r\n\t\telse if(typeof exports === 'object')\r\n\t\t\texports[\"CanvasFilter\"] = factory();\r\n\t\telse\r\n\t\t\troot[\"CanvasFilter\"] = factory();\r\n\t})(this, function() {\r\n\treturn /******/ (function(modules) { // webpackBootstrap\r\n\t/******/ \t// The module cache\r\n\t/******/ \tvar installedModules = {};\r\n\t/******/\r\n\t/******/ \t// The require function\r\n\t/******/ \tfunction __webpack_require__(moduleId) {\r\n\t/******/\r\n\t/******/ \t\t// Check if module is in cache\r\n\t/******/ \t\tif(installedModules[moduleId])\r\n\t/******/ \t\t\treturn installedModules[moduleId].exports;\r\n\t/******/\r\n\t/******/ \t\t// Create a new module (and put it into the cache)\r\n\t/******/ \t\tvar module = installedModules[moduleId] = {\r\n\t/******/ \t\t\texports: {},\r\n\t/******/ \t\t\tid: moduleId,\r\n\t/******/ \t\t\tloaded: false\r\n\t/******/ \t\t};\r\n\t/******/\r\n\t/******/ \t\t// Execute the module function\r\n\t/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\r\n\t/******/\r\n\t/******/ \t\t// Flag the module as loaded\r\n\t/******/ \t\tmodule.loaded = true;\r\n\t/******/\r\n\t/******/ \t\t// Return the exports of the module\r\n\t/******/ \t\treturn module.exports;\r\n\t/******/ \t}\r\n\t/******/\r\n\t/******/\r\n\t/******/ \t// expose the modules object (__webpack_modules__)\r\n\t/******/ \t__webpack_require__.m = modules;\r\n\t/******/\r\n\t/******/ \t// expose the module cache\r\n\t/******/ \t__webpack_require__.c = installedModules;\r\n\t/******/\r\n\t/******/ \t// __webpack_public_path__\r\n\t/******/ \t__webpack_require__.p = \"\";\r\n\t/******/\r\n\t/******/ \t// Load entry module and return exports\r\n\t/******/ \treturn __webpack_require__(0);\r\n\t/******/ })\r\n\t/************************************************************************/\r\n\t/******/ ([\r\n\t/* 0 */\r\n\t/***/ function(module, exports, __webpack_require__) {\r\n\t\r\n\t\tmodule.exports = __webpack_require__(1);\r\n\t\r\n\t\r\n\t/***/ },\r\n\t/* 1 */\r\n\t/***/ function(module, exports) {\r\n\t\r\n\t\t'use strict';\r\n\t\t\r\n\t\tObject.defineProperty(exports, \"__esModule\", {\r\n\t\t    value: true\r\n\t\t});\r\n\t\t// Grayscale algorithms\r\n\t\tvar grayscaleAlgorithms = ['none', 'average', 'desaturation', 'decomposition-min', 'decomposition-max', 'luma', 'luma-601', 'luma-709', 'luma-240', 'red-chanel', 'green-chanel', 'blue-chanel'];\r\n\t\t\r\n\t\t// Trucate color value in the 0-255 range\r\n\t\tfunction color(color) {\r\n\t\t    return color < 0 ? 0 : color > 255 ? 255 : color;\r\n\t\t}\r\n\t\t\r\n\t\t// Filters ...\r\n\t\tfunction invertColor(data, i, value) {\r\n\t\t    if (value) {\r\n\t\t        data[i] = color(255 - data[i]);\r\n\t\t        data[i + 1] = color(255 - data[i + 1]);\r\n\t\t        data[i + 2] = color(255 - data[i + 2]);\r\n\t\t    }\r\n\t\t}\r\n\t\t\r\n\t\tfunction brightness(data, i, value) {\r\n\t\t    if (value !== undefined) {\r\n\t\t        data[i] = color(data[i] + value);\r\n\t\t        data[i + 1] = color(data[i + 1] + value);\r\n\t\t        data[i + 2] = color(data[i + 2] + value);\r\n\t\t    }\r\n\t\t}\r\n\t\t\r\n\t\tfunction contrast(data, i, value) {\r\n\t\t    if (value !== undefined) {\r\n\t\t        data[i] = color(value * (data[i] - 128) + 128);\r\n\t\t        data[i + 1] = color(value * (data[i + 1] - 128) + 128);\r\n\t\t        data[i + 2] = color(value * (data[i + 2] - 128) + 128);\r\n\t\t    }\r\n\t\t}\r\n\t\t\r\n\t\tfunction gamma(data, i, value) {\r\n\t\t    if (value !== undefined) {\r\n\t\t        data[i] = color(Math.exp(Math.log(255 * (data[i] / 255)) * value));\r\n\t\t        data[i + 1] = color(Math.exp(Math.log(255 * (data[i + 1] / 255)) * value));\r\n\t\t        data[i + 2] = color(Math.exp(Math.log(255 * (data[i + 2] / 255)) * value));\r\n\t\t    }\r\n\t\t}\r\n\t\t\r\n\t\tfunction grayscale(data, i, algorithm, shades) {\r\n\t\t    // Graysale\r\n\t\t    // http://www.tannerhelland.com/3643/grayscale-image-algorithm-vb6/\r\n\t\t\r\n\t\t    // Unsupported algorithm\r\n\t\t    if (grayscaleAlgorithms.indexOf(algorithm) === -1) {\r\n\t\t        throw new Error('Unsupported grayscale algorithm: ' + algorithm);\r\n\t\t    }\r\n\t\t\r\n\t\t    // None\r\n\t\t    if (algorithm === 'none') {\r\n\t\t        return null;\r\n\t\t    }\r\n\t\t\r\n\t\t    // Get Red/Green/Blue values\r\n\t\t    var gray = void 0;\r\n\t\t    var r = data[i];\r\n\t\t    var g = data[i + 1];\r\n\t\t    var b = data[i + 2];\r\n\t\t\r\n\t\t    switch (algorithm) {\r\n\t\t        case 'average':\r\n\t\t            gray = (r + g + b) / 3;\r\n\t\t            break;\r\n\t\t\r\n\t\t        case 'luma':\r\n\t\t            // Default\r\n\t\t            gray = r * 0.3 + g * 0.59 + b * 0.11;\r\n\t\t            break;\r\n\t\t\r\n\t\t        case 'luma-601':\r\n\t\t            // CCIR-601\r\n\t\t            gray = r * 0.299 + g * 0.587 + b * 0.114;\r\n\t\t            break;\r\n\t\t\r\n\t\t        case 'luma-709':\r\n\t\t            // ITU-R-709\r\n\t\t            gray = r * 0.2126 + g * 0.7152 + b * 0.0722;\r\n\t\t            break;\r\n\t\t\r\n\t\t        case 'luma-240':\r\n\t\t            // SMPTE-240M\r\n\t\t            gray = r * 0.212 + g * 0.701 + b * 0.087;\r\n\t\t            break;\r\n\t\t\r\n\t\t        case 'desaturation':\r\n\t\t            gray = (Math.max(r, g, b) + Math.min(r, g, b)) / 2;\r\n\t\t            break;\r\n\t\t\r\n\t\t        case 'decomposition-min':\r\n\t\t            gray = Math.min(r, g, b);\r\n\t\t            break;\r\n\t\t\r\n\t\t        case 'decomposition-max':\r\n\t\t            gray = Math.max(r, g, b);\r\n\t\t            break;\r\n\t\t\r\n\t\t        case 'red-chanel':\r\n\t\t            gray = r;\r\n\t\t            break;\r\n\t\t\r\n\t\t        case 'green-chanel':\r\n\t\t            gray = g;\r\n\t\t            break;\r\n\t\t\r\n\t\t        case 'blue-chanel':\r\n\t\t            gray = b;\r\n\t\t            break;\r\n\t\t    }\r\n\t\t\r\n\t\t    // Shades of gray\r\n\t\t    if (shades !== undefined) {\r\n\t\t        gray = parseInt(gray / shades) * shades;\r\n\t\t    }\r\n\t\t\r\n\t\t    // Force integer\r\n\t\t    gray = parseInt(gray);\r\n\t\t\r\n\t\t    // Set new r/g/b values\r\n\t\t    data[i] = color(gray);\r\n\t\t    data[i + 1] = color(gray);\r\n\t\t    data[i + 2] = color(gray);\r\n\t\t}\r\n\t\t\r\n\t\t// Apply filters on provided canvas\r\n\t\tfunction canvasFilters(canvas, settings) {\r\n\t\t    settings = Object.assign({}, {\r\n\t\t        smoothing: false, // Smoothing [true|fale]\r\n\t\t        brightness: 0, // Image brightness [-255 to +255]\r\n\t\t        contrast: 0, // Image contrast [-255 to +255]\r\n\t\t        gamma: 0, // Image gamma correction [0.01 to 7.99]\r\n\t\t        grayscale: 'none', // Graysale algorithm [average, luma, luma-601, luma-709, luma-240, desaturation, decomposition-[min|max], [red|green|blue]-chanel]\r\n\t\t        shadesOfGray: 256, // Number of shades of gray [2-256]\r\n\t\t        invertColor: false // Invert color...\r\n\t\t    }, settings || {});\r\n\t\t\r\n\t\t    // Get canvas 2d context\r\n\t\t    var context = canvas.getContext('2d');\r\n\t\t\r\n\t\t    // Smoothing\r\n\t\t    if (context.imageSmoothingEnabled !== undefined) {\r\n\t\t        context.imageSmoothingEnabled = settings.smoothing;\r\n\t\t    } else {\r\n\t\t        context.mozImageSmoothingEnabled = settings.smoothing;\r\n\t\t        context.webkitImageSmoothingEnabled = settings.smoothing;\r\n\t\t        context.msImageSmoothingEnabled = settings.smoothing;\r\n\t\t        context.oImageSmoothingEnabled = settings.smoothing;\r\n\t\t    }\r\n\t\t\r\n\t\t    // Get image data\r\n\t\t    var imageData = context.getImageData(0, 0, canvas.width, canvas.height);\r\n\t\t    var data = imageData.data;\r\n\t\t\r\n\t\t    var contrastFactor = void 0,\r\n\t\t        brightnessOffset = void 0,\r\n\t\t        gammaCorrection = void 0,\r\n\t\t        shadesOfGrayFactor = void 0;\r\n\t\t\r\n\t\t    if (settings.contrast !== 0) {\r\n\t\t        contrastFactor = 259 * (settings.contrast + 255) / (255 * (259 - settings.contrast));\r\n\t\t    }\r\n\t\t\r\n\t\t    if (settings.brightness !== 0) {\r\n\t\t        brightnessOffset = settings.brightness;\r\n\t\t    }\r\n\t\t\r\n\t\t    if (settings.gamma !== 0) {\r\n\t\t        gammaCorrection = 1 / settings.gamma;\r\n\t\t    }\r\n\t\t\r\n\t\t    // Shades of gray\r\n\t\t    if (settings.shadesOfGray > 1 && settings.shadesOfGray < 256) {\r\n\t\t        shadesOfGrayFactor = 255 / (settings.shadesOfGray - 1);\r\n\t\t    }\r\n\t\t\r\n\t\t    // For each pixel\r\n\t\t    for (var i = 0, il = data.length; i < il; i += 4) {\r\n\t\t        // Apply filters\r\n\t\t        invertColor(data, i, settings.invertColor);\r\n\t\t        brightness(data, i, brightnessOffset);\r\n\t\t        contrast(data, i, contrastFactor);\r\n\t\t        gamma(data, i, gammaCorrection);\r\n\t\t        grayscale(data, i, settings.grayscale, shadesOfGrayFactor);\r\n\t\t    }\r\n\t\t\r\n\t\t    // Write new image data on the context\r\n\t\t    context.putImageData(imageData, 0, 0);\r\n\t\t}\r\n\t\t\r\n\t\t// Exports\r\n\t\texports.canvasFilters = canvasFilters;\r\n\t\texports.default = canvasFilters;\r\n\t\r\n\t/***/ }\r\n\t/******/ ])\r\n\t});\r\n\t;\r\n\t//# sourceMappingURL=lw.canvas-filters.js.map\r\n\r\n/***/ }\r\n/******/ ])\r\n});\r\n;\r\n//# sourceMappingURL=lw.canvas-grid.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/lw.canvas-grid/dist/lw.canvas-grid.js\n// module id = 2\n// module chunks = 0"],"sourceRoot":""}